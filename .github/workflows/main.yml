name: CI/CD Pipeline - Projeto MovieFlix

on:
  push:
    branches: [ "main" ]

jobs:
  build-test-and-push:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13-alpine
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: 1. Baixando o código do repositório
        uses: actions/checkout@v4

      - name: 2. Fazendo login no Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 3. Construindo, Testando e Enviando a Imagem do Frontend
        run: |
          IMAGE_NAME="${{ secrets.DOCKERHUB_USERNAME }}/movieflix-frontend"
          
          # --- TESTE ---
          echo "Preparando arquivos para o teste..."
          # 1. Renomeia o nginx.conf de produção para não ser usado
          mv frontend/nginx.conf frontend/nginx.conf.prod
          # 2. Ativa a configuração de teste, renomeando-a para nginx.conf
          mv frontend/nginx.ci.conf frontend/nginx.conf

          echo "Construindo imagem de teste..."
          docker build -t test-frontend-image -f frontend/Dockerfile ./frontend

          echo "Rodando contêiner de teste..."
          docker run -d --name test-frontend -p 8080:80 test-frontend-image
          sleep 5 # Pausa para garantir que o contêiner suba

          if [ "$(docker ps -q -f name=test-frontend)" ]; then
            echo "✅ Teste de inicialização do Frontend passou."
          else
            echo "❌ Teste de inicialização do Frontend FALHOU."
            exit 1
          fi
          docker stop test-frontend

          # --- BUILD FINAL E PUSH ---
          echo "Restaurando arquivos para o build de produção..."
          # 3. Restaura os nomes originais dos arquivos
          mv frontend/nginx.conf frontend/nginx.ci.conf
          mv frontend/nginx.conf.prod frontend/nginx.conf
          
          echo "Construindo imagem final de produção..."
          docker build -t $IMAGE_NAME:latest -f frontend/Dockerfile ./frontend
          
          echo "Enviando imagem final para o Docker Hub..."
          docker push $IMAGE_NAME:latest

      - name: 4. Construindo, Testando e Enviando a Imagem da API
        env:
          DATABASE_URL: "postgresql://testuser:testpassword@localhost:5432/testdb"
        run: |
          IMAGE_NAME="${{ secrets.DOCKERHUB_USERNAME }}/movieflix-api"
          docker build -t $IMAGE_NAME:latest -f api/Dockerfile ./api
          docker run -d --name test-api -p 5000:5000 -e DATABASE_URL=$DATABASE_URL $IMAGE_NAME:latest
          sleep 10
          if [ "$(docker ps -q -f name=test-api)" ]; then
            echo "✅ Teste de inicialização da API passou."
          else
            echo "❌ Teste de inicialização da API FALHOU."
            exit 1
          fi
          docker stop test-api
          docker push $IMAGE_NAME:latest

      - name: 5. Construindo e Enviando a Imagem do Importador de Dados
        run: |
          IMAGE_NAME="${{ secrets.DOCKERHUB_USERNAME }}/movieflix-importer"
          docker build -t $IMAGE_NAME:latest -f dados/Dockerfile ./dados
          docker push $IMAGE_NAME:latest