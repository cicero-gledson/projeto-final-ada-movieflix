name: CI/CD Pipeline - Projeto MovieFlix

on:
  push:
    branches: [ "main" ]

jobs:
  build-test-and-push:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13-alpine
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: 1. Baixando o código do repositório
        uses: actions/checkout@v4

      - name: 2. Fazendo login no Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 3. Construindo, Testando e Enviando a Imagem do Frontend
        run: |
          IMAGE_NAME="${{ secrets.DOCKERHUB_USERNAME }}/movieflix-frontend"
          docker build -t $IMAGE_NAME:latest -f frontend/Dockerfile ./frontend
          docker run -d --name test-frontend -p 8080:80 $IMAGE_NAME:latest    

          # --- TESTE CORRIGIDO: Loop de verificação ---
          echo "Aguardando o frontend iniciar..."
          for i in {1..15}; do
            if curl -sf http://localhost:8080; then
              echo "✅ Frontend está respondendo."
              break
            fi
            echo "Tentativa $i falhou. Aguardando 2 segundos..."
            sleep 2
          done
          
          # Garante que o teste falhe se o loop terminar sem sucesso
          curl -f http://localhost:8080

          docker stop test-frontend
          docker push $IMAGE_NAME:latest

      - name: 4. Construindo, Testando e Enviando a Imagem da API
        env:
          DATABASE_URL: "postgresql://testuser:testpassword@localhost:5432/testdb"
        run: |
          IMAGE_NAME="${{ secrets.DOCKERHUB_USERNAME }}/movieflix-api"
          docker build -t $IMAGE_NAME:latest -f api/Dockerfile ./api
          docker run -d --name test-api -p 5000:5000 -e DATABASE_URL=$DATABASE_URL $IMAGE_NAME:latest
          
          # --- TESTE CORRIGIDO: Loop de verificação ---
          echo "Aguardando a API iniciar..."
          for i in {1..15}; do
            if curl -sf http://localhost:5000/api/health; then
              echo "✅ API está respondendo."
              break
            fi
            echo "Tentativa $i falhou. Aguardando 2 segundos..."
            sleep 2
          done
          
          # Garante que o teste falhe se o loop terminar sem sucesso
          curl -f http://localhost:5000/api/health 
          
          docker stop test-api
          docker push $IMAGE_NAME:latest

      - name: 5. Construindo e Enviando a Imagem do Importador de Dados
        run: |
          IMAGE_NAME="${{ secrets.DOCKERHUB_USERNAME }}/movieflix-importer"
          docker build -t $IMAGE_NAME:latest -f dados/Dockerfile ./dados
          docker push $IMAGE_NAME:latest